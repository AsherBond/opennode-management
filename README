OpenNode Management Service
---------------------------

=== Requirements ===

Currently the only requirement is Python 2.7.

On Mac OS X, Python 2.7 can be installed either manually, using
MacPorts by running `sudo port install python27`, or using Homebrew by
running `brew install python`.

=== Setup ===

1. `git clone git@github.com:opennode/opennode-management.git`.

2. Create a Python virtualenv either by using the `virtualenv` command,
   or `mkvirtualenv` bundled with virtualenvwrapper.

   It is recommended to use the `--no-site-packages` option for an
   isolated and clean environment, especially in production deployments.

   More info about virtualenvwrapper usage:
       http://www.doughellmann.com/articles/pythonmagazine/completely-different/2008-05-virtualenvwrapper/index.html

   Example using the virtualenv-burrito package:

       `curl -s https://raw.github.com/brainsik/virtualenv-burrito/master/virtualenv-burrito.sh | bash`
       `source ~/.venvburrito/startup.sh`
       `mkvirtualenv --no-site-packages --python=python2.7 opennode-management`
       `workon opennode-management`

3. Install dependencies by running `pip install -r requirements.txt`
   in the repository root.

4. install func (`yum install func` or from sources at `git://git.fedorahosted.org/func.git` or use `https://fedorahosted.org/releases/f/u/func/func-0.28.tar.gz`)

5. install certmaster (`yum install certmaster` or from sources at `git://git.fedorahosted.org/certmaster.git` or use `https://fedorahosted.org/releases/c/e/certmaster/certmaster-0.28.tar.gz`)

6. Setup user accounts in the `oms_passwd` file. It contains SSHA password hashes; an easy way to create them is: `echo username:$(slappasswd -s <your_password>):role1,role2 >>oms_passwd`

7. Start the Twisted twistd server on port 8080 by executing
   `./start-oms.sh` on Unix systems and `start-oms.bat` on Windows.

=== Testing ===

1. Dependencies for testing:  `pip install -r test-requirements.txt`

2. `./test.sh`

=== High level architecture ===

The core consists of:

* The models:

    These are mostly ORM backed and some transient classes which
    contain CRUD and most of the domain logic.

* Traversal:

    Mapping of URIs/paths to model objects,
    i.e. /datacentres/123/computes/9 -> <Compute object>.

* Interaction layers a.k.a endpoints (in Twisted terminology):

    This is a thin layer that takes an incoming request/interaction
    (either SSH/vconsole, HTTP or WebSocket) which is always bound to
    a URI/path (cwd in SSH, request URI in HTTP/Websocket) and maps
    it, using traversal, to a domain object and executes appropriate
    methods and returns a result.

    This layer can be thought of as the controller.

    The interaction layer is as thin as possible as traversal, domain
    logic and security are in the core, and serialisation is generic.


=== Interaction layers/endpoints ===

The primary interaction layer is the HTTP REST endpoint which contains
an HTTP request handler and a set of views, one for each content
type. The views can either be generic over content types, or
specialised for specific models. Generic is preferred over specialised
though.

The WebSocket endpoint is in big part complementary to the HTTP REST
endpoint. It is mostly an alternative carrier or transport mechanism
for individual HTTP-like requests. In addition, it is used to push a
stream of data/events to the browser for real time updates of the UI.
As HTTP REST like requests can be transported from client to server
over this layer, it also provides a performance boost over classic
HTTP as it eliminates any request overhead both in terms of
responsiveness and network/resource usage. It is also easier to manage
than classic HTTP as browser security restrictions do not apply to
WebSocket connections.

The SSH virtual console endpoint provides a bash-like pseudo shell
over SSH that exposes a filesystem-like hierarchy to navigate in and
manage the server infrastructure environment. It provides or will
provide all the basic shell-like commands such as `cd`, `ls`, `pwd`,
`cat`, `mv`, `cp` and `rm`. It also provides the generic command `set`
to modify attributes of objects.
